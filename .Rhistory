log(-1)
traceback()
mean(x)
x <- NaN
mean(x)
mean(y)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
library(datasets)
data(iris)
?iris
head(iris)
head(iris)
s <- split(iris, iris$Sepal.Length)
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(dataset)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
ls
n
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnorm(10,0,20)
y <- 0.5 + 2*x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 = 1
x2 = 2
fit <- lm(y ~ x1 + x2)
str(summaryRProf)
str(summaryRProf()
)
str(summaryRprof())
str(summaryRprof
)
tmp <- function(y, x1, x2){}
tmp <- function(y, x1, x2){
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
}
Rprof(t <- tmp())
summaryRprof(tmp)
library(datasets)
Rprof("test")
fit <- lm(y~x1+x2)
Rprof(NULL)
summaryRprof("test")
x1 = c(1,2,3,4,5)
x2 = c(2,5,5,8,9)
library(datasets)
Rprof("test")
fit <- lm(y~x1+x2)
y = c(2,2,2,2,2)
fit <- lm(y~x1+x2)
Rprof(NULL)
summaryRprof("test")
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
swirl()
5+7
x <= 5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collpase = " ")
info()
paste(my_char, collpase = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Yusan")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patients", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
library(datasets)
data(cars)
with(cars, plot(speed, dist))
data(mtcars)
head(mtcars)
help(mtcars)
class(mtcars)
install.packages("VIF")
vif(fit)
library(car)
fit<-lm(Fertility~.,data=swiss)
vif(fit)
library(VIF)
library(car)
fit<-lm(Fertility~.,data=swiss)
vif(fit)
mtcars$am, mtcars$gear, mtcars$carb)
data(mtcars)
x <- c(mtcars$cyl, mtcars$disp, mtcars$hp, mtcars$drat, mtcars$wt, mtcars$qsec, mtcars$vs, mtcars$am, mtcars$gear, mtcars$carb)
vif(mtcars$mpg, x)
x
nrow(mtcars)
x <- cbind(mtcars$cyl, mtcars$disp, mtcars$hp, mtcars$drat, mtcars$wt, mtcars$qsec, mtcars$vs, mtcars$am, mtcars$gear, mtcars$carb)
x
data(syn)
head(syn)
nrow(syn)
class(syn)
data(syn)
names(syn)
nrow(syn$y)
library(car)
install.packages("car")
library(car)
fit<-lm(Fertility~.,data=swiss)
vif(fit)
12.405 + 0.278
-2.725-4.878
0.878+0.747
- 0.347+ 0.971
12.683-12.405
7.603-2.725
1.625-0.878
mean_wt <- mean(mtcars$wt)
mean_qset <- mean(mtcars$qset)
mean_carb <- mean(mtcars$carb)
head(mtcars$qset)
data(mtcars)
head(mtcars$qset)
mtcars$qset
Regression Model - Course Project
========================================================
First we load in the `mtcars` dataset:
```{r}
data(mtcars)
```
We want to look at how the variables correlate with each other. So we do the following:
```{r}
require(stats)
require(graphics)
pairs(mtcars, panel = panel.smooth, main = "Motor Trend Car Road Tests Data")
```
We can see that, visually, the variables that correlate with `mpg` the most are `disp`, `hp`, `drat` and `wt`.
If we compute their real correlation coeficient:
```{r message=FALSE}
library(Hmisc)
rcorr(as.matrix(mtcars), type = "pearson")
```
According to the computed correlations, we know that `mpg` correlates with `cyl` and `disp` the most. Let's see how their correlation looks like when considering the different transmission (color by the variable `am`, where the `automatic` ones are colored red):
```{r}
plot(mtcars$mpg, mtcars$cyl, pch=19)
points(mtcars$mpg, mtcars$cyl, pch=19, col=((mtcars$am==0)*1+1))
```
```{r}
plot(mtcars$mpg, mtcars$disp, pch=19)
points(mtcars$mpg, mtcars$disp, pch=19, col=((mtcars$am==0)*1+1))
```
We can see a trend that as the `mpg` increases, the observations tend to be `manual` instead of `automatic`.
If we do a simple regression to regress the 10 variables ong `mpg`:
```{r}
fit <- lm(formula = mpg ~ ., data = mtcars)
summary(fit)
```
We found that if we include all of the given variables, none of the variable adds significant predictive value to the model if they enter the model last at a 95% level. This might be caused by the reason that we didn't include any interactions between variables, especially the ones with the dummy variable: `am`. Since we are not sure which of the variables will have potential interactions with `am`, we test them by including all of them:
```{r}
fit2 <- lm(formula = mpg ~ . + cyl*am + disp*am + hp*am + drat*am + wt*am + qsec*am + vs*am + gear*am + carb*am, data = mtcars)
summary(fit2)
```
According to the output, we can see that compared to the one without any interactions, in this model, a lot more variables have siginificant predictive ability at a 95% level.
Test the VIFs:
```{r}
library(car)
vif(fit2)
```
To solve the above issues, we do the following model selection (I adopted **Stepwise Regression**):
```{r results="hide"}
library(MASS)
step <- stepAIC(fit, direction="both")
```
And show the result:
```{r}
step$anova
```
We can see that the final returned model is `mpg ~ wt + qsec + am`. We compute the Adjusted R-squared of it:
```{r}
fit3 <- lm(formula = mpg ~ wt + qsec + am, data = mtcars)
summary(fit3)$adj.r.squared
```
However, we found that there is no variable having any interaction with the dummy variable `am`, which is not ideal. To encounter this, we want to include interactions. We include all the interaction terms that we explored earlier that have significant predictive ability. And we look at its Adjusted R-squared:
```{r}
fit4 <- lm(formula = mpg ~ wt + qsec + am + wt*am + qsec*am + am*carb, data = mtcars)
summary(fit4)
```
As the result show, by having the formula: `mpg ~ wt + qsec + am + wt*am + qsec*am + am*carb`, we can achieve an Adjusted R-squred value of 87.33%. Let's plot the residual plot:
```{r}
qqPlot(fit4, main="QQ Plot")
```
## Questions
Now we answer the two questions that were asked:
### 1. Is an automatic or manual transmission better for MPG
### 2. Quantify the MPG difference between automatic and manual transmissions
Based on the final regression model:
$mpg = 12.405 -2.725 \times wt + 0.878 \times qsec + 0.278 \times am - 0.347 \times carb -4.878 \times wt \times am +0.747 \times qsec \times am + 0.971 \times am \times carb$
We know that on average, when a car is automatic, it has $am = 0$, so the regression model becomes:
$mpg = 12.405 - 2.725 \times wt + 0.878 \times qsec$
If it is manual, the regression model then becomes:
$mpg = 12.405 -2.725 \times wt + 0.878 \times qsec + 0.278 - 0.347 \times carb -4.878 \times wt +0.747 \times qsec + 0.971 \times carb$
, which is equal to
$mpg = 12.683 -7.603 \times wt + 1.625 \times qsec + 0.624 \times carb$
So if we minus the first equation from the second equation, we can get
$\Delta mpg = 0.278 - 4.878 \times wt + 0.747 \times qsec + 0.624 \times carb$
We test this equation on our dataset:
```{r}
mean_wt <- mean(mtcars$wt)
mean_qsec <- mean(mtcars$qsec)
mean_carb <- mean(mtcars$carb)
delta_mpg <- 0.728 - 4.878 * mean_wt + 0.747 * mean_qsec + 0.624 * mean_carb
print(delta_mpg)
```
And found this value to be $>0$. Therefore, we can conclude that manual transmission is better for MPG for an average of `r delta_mpg`.
| ![Figure 1](figure/unnamed-chunk-2.png = 250x) | ![Figure 2](figure/unnamed-chunk-4.png)  |
| ![Figure 1](figure/unnamed-chunk-2.png = 500x) | ![Figure 2](figure/unnamed-chunk-4.png)  |
n <- 9
mn <- 1100
s <- 30
mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
n <- 9
mn <- -2
mn +  c(-1, 1) * qt(0.975, n-1) * 2.6/sqrt(n)
mn +  c(-1, 1) * qt(0.975, n-1) * 2.1/sqrt(n)
mn +  c(-1, 1) * qt(0.975, n-1) * 1.5/sqrt(n)
mn +  c(-1, 1) * qt(0.975, n-1) * 0.3/sqrt(n)
n <- 10
mn <- 3
s < sqrt(0.6)
s <- sqrt(0.6)
mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
new_con <- mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
mn <- 5
s <- sqrt(0.68)
old_con <- mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
old_con
new_con - old_con
n
s
mn_new <- 3
s_new <- sqrt(0.6)
n_new <- 10
mn_new + c(1,-1) * qt(0.975, n_new-1) * s_new/sqrt(n_new)
mn_old <- 5
s_old < sqrt(0.68)
s_old <- sqrt(0.68)
n_old <- 10
mn_old + c(1,-1) * qt(0.975, n_old-1) * s_old/sqrt(n_old)
3.554113 2.445887 - 5.589898 4.410102
2.445887 - 4.410102
3.554113 - 5.589898
mn <- mean(3, 5)
s <- 0.6-0.68
mn <- 3-5
n <- 20
mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
n <- 10
mn +  c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
n1 <- 10
n2 <- 10
sp <- sqrt(((n1-1) * 0.6 + (n2-1) * 0.68) / (n1+n2-2))
md <- 3 - 5
semd <- sp * sqrt(1/n1 + 1/n2)
md + c(-1, 1) * qt(0.975, n1 + n2 - 2) * semd
n3 <- 100
n4 <- 100
sp_2 <- sqrt(((n4-1) * 2 + (n1-1) * 0.5) / (n4+n3-2))
md <- 6-4
semd_2 <- sp_2 * sqrt(1/n4 + 1/n3)
md + c(-1, 1) * qt(0.975, n4 + n3 - 2) * semd_2
n1 <- 9
n2 <- 9
sd1 <- 1.5
sd2 <- 1.8
mn1 <- -3
mn2 <- 1
sp <- sqrt(((n1 - 1) * sd1^2 + (n2-1) * sd2^2) / (n1 + n2 - 2))
md <- mn1 - mn2
semd <- sp * sqrt(1/n1 + 1/n2)
md + c(-1, 1) * qt(0.95, n1 + n2 - 2) * semd
data(mtcars)
?mtcars
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
-1.5078 * 4
fit <- lm(mpg ~ cyl, data = mtcars)
summary(fit)
-2.8758 *4
fit2 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit2)$coefficients
summary(fit)$coefficients
-1.507795 * 4
fit3 <- lm(mpg ~ cyl + cyl*wt, data = mtcars)
summary(fit3)$coefficients
data(mtcars)
fit1 <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit1)$coefficients
-1.507795 * 4
fit2 <- lm(mpg ~ cyl, data = mtcars)
summary(fit2)$coefficients
-2.87579 * 4
fit3 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)$coefficients
I(wt * 0.5)
I(mtcars$wt * 0.5)
mtcars$wt
fit1 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(fit1)$coefficients
summary(fit1)
unique(mtcars$cyl)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit2)$coefficients
fit3 <- lm(mpg ~ wt + factor(cyl) + wt * cyl)
fit3 <- lm(mpg ~ wt + factor(cyl) + wt * cyl, data = mtcars)
summary(fit3)$coefficients
summary(fit3)
anova(fit2, fit3)
summary(fit2)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
dfbeta(fit)
dfbetas(fit)
fit1 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
summary(fit2)
fit1 <- lm(mpg ~ I(1 * (cyl == 4)) + I(1 * (cyl == 6)) + I(1 * (cyl == 8)), data = mtcars)
summary(fit1)$coef
fit2 <- lm(mpg ~ I(1 * (cyl == 4)) + I(1 * (cyl == 6)) + I(1 * (cyl == 8)) + wt, data = mtcars)
summary(fit2)$coef
fit1 <- lm(mpg ~ I(1 * (cyl == 4)) +  I(1 * (cyl == 8)), data = mtcars)
fit2 <- lm(mpg ~ I(1 * (cyl == 4)) +  I(1 * (cyl == 8)) + wt, data = mtcars)
summary(fit1)$coef
summary(fit2)$coef
fit1 <- lm(mpg ~ wt + factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit1)
summary(fit2)
fit1 <- lm(wt + factor(cyl), data = mtcars)
fit1 <- lm(wt ~ factor(cyl), data = mtcars)
fit1 <- (mpg ~ factor(cyl) + wt, data = mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt = wt * cyl, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + wt * cyl, data = mtcars)
anova(fit1, fit2)
fit2 <- update(fit1, mpg ~ factor(cyl) + wt + wt * cyl)
anova(fit1, fit2)
r.page <- readLines("http://www.realestate.com.au/neighbourhoods/abbotsford-3067-vic")
class(r.page)
r.page
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("Yusan")
slidify("index.Rmd")
publish(user = "yusanlin", repo = "Fashionology")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
require(devtools)
library(slidify)
author("Yusan")
slidify("small world.Rmd")
setwd("~/Documents/GitHub/Notes")
slidify("small world.Rmd")
publish(user = "Yusan", repo = "Notes")
publish(user = "yusanlin", repo = "Notes")
publish(user = "yusanlin", repo = "Notes")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
slidify("small world.Rmd")
